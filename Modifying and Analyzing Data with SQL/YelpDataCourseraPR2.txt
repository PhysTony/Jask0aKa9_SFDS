Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions 
that will help you profile and understand the data just like a data scientist would.
For this first part of the assignment, you will be assessed both on the correctness
of your findings, as well as the code you used to arrive at your answer. You will be
graded on how easy your code is to read, so remember to use proper formatting and
comments where necessary.

In the second part of the assignment, you are asked to come up with your own infe-
rences and analysis of the data for a particular research question you want to
answer. You will be required to prepare the dataset for the analysis you choose to
do. As with the first part, you will be graded, in part, on how easy your code is to
read, so use proper formatting and comments to illustrate and communicate your
intent as required.

For both parts of this assignment, use this "worksheet." It provides all the ques-
tions you are being asked, and your job will be to transfer your answers and SQL
coding where indicated into this worksheet so that your peers can review your work.
You should be able to use any Text Editor (Windows Notepad, Apple TextEdit,
Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to
use Word or some other page layout application, just be careful to make sure your
answers and code are lined appropriately. In this case, you may want to save as a
PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables
below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each
table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115 
v. Review = 10000
vi. Checkin = 493 
vii. Photo = 10000
viii. Tip = 537 -- user_id foreign key for Tip
ix. User = 10000 
x. Friend = 11
xi. Elite_years = 2780 

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	
	/*
	Use primary or foreign keys as guidline to count NULL values since PK and FK
	do not contain NULL values.
	Since COUNT does not take on count NULL values, ii's useful for this task.
	*/
	
	SELECT 
		COUNT(id) - COUNT(name) AS name
		,COUNT(id) - COUNT(review_count) AS review_count
		,COUNT(id) - COUNT(yelping_since) AS yelping_since
		,COUNT(id) - COUNT(useful) AS useful
		,COUNT(id) - COUNT(funny) AS funny
		,COUNT(id) - COUNT(cool) AS cool
		,COUNT(id) - COUNT(fans) AS fans
		,COUNT(id) - COUNT(average_stars) AS average_stars
		,COUNT(id) - COUNT(compliment_hot) AS compliment_hot
		,COUNT(id) - COUNT(compliment_more) AS compliment_more
		,COUNT(id) - COUNT(compliment_profile) AS compliment_profile
		,COUNT(id) - COUNT(compliment_cute) AS compliment_cute
		,COUNT(id) - COUNT(compliment_list) AS compliment_list
		,COUNT(id) - COUNT(compliment_note) AS compliment_note
		,COUNT(id) - COUNT(compliment_plain) AS compliment_plain
		,COUNT(id) - COUNT(compliment_cool) AS compliment_cool
		,COUNT(id) - COUNT(compliment_funny) AS compliment_funny
		,COUNT(id) - COUNT(compliment_writer) AS compliment_writer
		,COUNT(id) - COUNT(compliment_photos) AS compliment_photos
	FROM 
		user
		

	
4. For each table and column listed below, display the smallest (minimum), largest
(maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 6		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144 
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414 
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995 
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	/*
	SUM function and GROUP BY together to have the total
	number of reviews per city.
	*/
	
	SELECT 
	  city
	  ,SUM(review_count) AS Number_of_Reviews
	FROM 
	  business
	GROUP BY city
	ORDER BY Number_of_Reviews DESC
	LIMIT 10

	Copy and Paste the Result Below:
	
	+------------+-------------------+
	| city       | Number_of_Reviews |
	+------------+-------------------+
	| Las Vegas  |             82854 |
	| Phoenix    |             34503 |
	| Toronto    |             24113 |
	| Scottsdale |             20614 |
	| Charlotte  |             12523 |
	| Henderson  |             10871 |
	| Tempe      |             10504 |
	| Pittsburgh |              9798 |
	| Montréal   |              9448 |
	| Chandler   |              8112 |
	+------------+-------------------+
	
	
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
	SELECT 
	  stars AS stars_rating
	  ,COUNT(stars) AS Frequency
	FROM 
	  business
	WHERE city = 'Avon'
	GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

		+--------------+-----------+
		| stars_rating | Frequency |
		+--------------+-----------+
		|          1.5 |         1 |
		|          2.5 |         2 |
		|          3.5 |         3 |
		|          4.0 |         2 |
		|          4.5 |         1 |
		|          5.0 |         1 |
		+--------------+-----------+

/*
Select  b.city
,b.stars
,b.review_count
from business as b
where City = "Markham"
Group by b.stars

+---------+-------+--------------+
| city    | stars | review_count |
+---------+-------+--------------+
| Markham |   1.0 |           12 |
| Markham |   1.5 |            3 |
| Markham |   2.0 |           11 |
| Markham |   2.5 |            6 |
| Markham |   3.0 |           12 |
| Markham |   3.5 |           54 |
| Markham |   4.0 |          195 |
| Markham |   4.5 |          216 |
| Markham |   5.0 |           14 |
+---------+-------+--------------+

*/


ii. Beachwood

SQL code used to arrive at answer:

	SELECT 
	  stars AS stars_rating
	  ,COUNT(stars) AS Frequency
	FROM 
	  business
	WHERE city = 'Beachwood'
	GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

		+--------------+-----------+
		| stars_rating | Frequency |
		+--------------+-----------+
		|          2.0 |         1 |
		|          2.5 |         1 |
		|          3.0 |         2 |
		|          3.5 |         2 |
		|          4.0 |         1 |
		|          4.5 |         2 |
		|          5.0 |         5 |
		+--------------+-----------+



7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
		
		SELECT 
		  name
		  ,review_count
		FROM 
		  user
		ORDER BY review_count DESC
		LIMIT 3
	
		
	Copy and Paste the Result Below:

	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+
	
	

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	First, take on a count the following code with its output
	
	-- Create a column Coefficient as guidline taking the column
	-- with higher values as numerator.
	SELECT
	  fans
	  ,review_count
	  ,review_count/fans AS Coefficient
	FROM 
	  user
	ORDER BY review_count DESC
	
	+------+--------------+-------------+
	| fans | review_count | Coefficient |
	+------+--------------+-------------+
	|  253 |         2000 |           7 |
	|   50 |         1629 |          32 |
	|   76 |         1339 |          17 |
	|  101 |         1246 |          12 |
	|  126 |         1215 |           9 |
	|  311 |         1153 |           3 |
	|   16 |         1116 |          69 |
	|  104 |         1039 |           9 |
	|  497 |          968 |           1 |
	|  173 |          930 |           5 |
	|   38 |          904 |          23 |
	|   43 |          864 |          20 |
	|  124 |          862 |           6 |
	|  115 |          861 |           7 |
	|   85 |          842 |           9 |
	|   37 |          836 |          22 |
	|  120 |          834 |           6 |
	|  159 |          813 |           5 |
	|   61 |          775 |          12 |
	|   78 |          754 |           9 |
	|   35 |          702 |          20 |
	|   10 |          696 |          69 |
	|  101 |          694 |           6 |
	|   25 |          676 |          27 |
	|   45 |          675 |          15 |
	+------+--------------+-------------+

	As simple as looking at Coefficient column to conclude that the number of fans and review_count
	are not correlated since the coefficiente seems to follow a random pattern. So, the answer is
	NO.


	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: "love". Since there are more number of stars in the interval 4-5
	than 1-2.

	
	SQL code used to arrive at answer:
	
	-- Taking 1 star as 'hate' 5 as 'love'.
	SELECT 
		stars
		,COUNT(stars) AS Number_of_Stars
	FROM 
		review
	GROUP BY stars
	
	+-------+-----------------+
	| stars | Number_of_Stars |
	+-------+-----------------+
	|     1 |            1392 |
	|     2 |             837 |
	|     3 |            1219 |
	|     4 |            2401 |
	|     5 |            4151 |
	+-------+-----------------+

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	-- Same logic as in 7
	SELECT 
	  name
	  ,fans
	FROM 
	  user
	ORDER BY fans DESC
	LIMIT 10
		
	
	Copy and Paste the Result Below:
	
	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or
category by their overall star rating. Compare the businesses with 2-3 stars to the
businesses with 4-5 stars and answer the following questions. Include your code.
	
	
i. Do the two groups you chose to analyze have a different distribution of hours?
   The answer is NO, even we can notice that the better reviewed companies are open
   much less hours than the Loblaws company.


ii. Do the two groups you chose to analyze have a different number of reviews?
	Yes, we can appreciate that the greater star average the company has, more reviews 
	it has.
         
         
iii. Are you able to infer anything from the location data provided between these two
groups? Explain.
	Yes, the best food companies reviewed in Toronto tends to be around latitude
	-79.44665. Howver, the others in 2-4 interval are around latitude -79.44925.
	Keep in mind, that four records are not enough data to conclude asure something.

SQL code used for analysis:

- Guidlines:

	SELECT
	  B.name
	  ,B.city
	  ,C.category
	  ,B.stars
	FROM 
	  business B
	  INNER JOIN
		category C
		  ON
		B.id = C.business_id
	WHERE C.category = 'Food'
	  AND B.city = 'Toronto'
	GROUP BY B.stars
/*
Output:
	+--------------------+---------+----------+-------+
	| name               | city    | category | stars |
	+--------------------+---------+----------+-------+
	| Loblaws            | Toronto | Food     |   2.5 |
	| The Kosher Gourmet | Toronto | Food     |   3.5 |
	| Halo Brewery       | Toronto | Food     |   4.0 |
	| Cabin Fever        | Toronto | Food     |   4.5 |
	+--------------------+---------+----------+-------+
*/
	
/*
i: Note that the companies of food will be in two groups:
> 2-3: 'Loblaws'
> 4-5: 'Halo Brewery' and 'Cabin Fever'

Since 'The Kosher Gourmet' is in the class 3-4, it won't be in our analysis.

For this task, with need to do a inner join using business_id from hours table.
*/

-- 2-3:
	SELECT
	  B.name
	  ,B.city
	  ,C.category
	  ,H.hours
	FROM 
	  business B
	  INNER JOIN
		category C
		  ON
		B.id = C.business_id
	  INNER JOIN
		hours H
		  ON
		C.business_id = H.business_id
	WHERE 
	  (C.category = 'Food'
		AND 
	  B.city = 'Toronto')
		AND
	  (B.name = 'Loblaws')
	GROUP BY H.hours
	ORDER BY B.name
	
/*	
	Output:
	+---------+---------+----------+----------------------+
	| name    | city    | category | hours                |
	+---------+---------+----------+----------------------+
	| Loblaws | Toronto | Food     | Friday|8:00-22:00    |
	| Loblaws | Toronto | Food     | Monday|8:00-22:00    |
	| Loblaws | Toronto | Food     | Saturday|8:00-22:00  |
	| Loblaws | Toronto | Food     | Sunday|8:00-22:00    |
	| Loblaws | Toronto | Food     | Thursday|8:00-22:00  |
	| Loblaws | Toronto | Food     | Tuesday|8:00-22:00   |
	| Loblaws | Toronto | Food     | Wednesday|8:00-22:00 |
	+---------+---------+----------+----------------------+
*/

-- 4-5: Since there are only two companies in this class, we can see bot simulstaneously
	SELECT
	  B.name
	  ,B.city
	  ,C.category
	  ,H.hours
	FROM 
	  business B
	  INNER JOIN
		category C
		  ON
		B.id = C.business_id
	  INNER JOIN
		hours H
		  ON
		C.business_id = H.business_id
	WHERE 
	  (C.category = 'Food'
		AND 
	  B.city = 'Toronto')
		AND
	  (B.name = 'Halo Brewery'
		OR -- Because we want to see both companies
	  B.name = 'Cabin Fever')
	GROUP BY H.hours
	ORDER BY B.name

/*
Output:
	+--------------+---------+----------+-----------------------+
	| name         | city    | category | hours                 |
	+--------------+---------+----------+-----------------------+
	| Cabin Fever  | Toronto | Food     | Friday|18:00-2:00     |
	| Cabin Fever  | Toronto | Food     | Monday|16:00-2:00     |
	| Cabin Fever  | Toronto | Food     | Saturday|16:00-2:00   |
	| Cabin Fever  | Toronto | Food     | Sunday|16:00-2:00     |
	| Cabin Fever  | Toronto | Food     | Thursday|18:00-2:00   |
	| Cabin Fever  | Toronto | Food     | Tuesday|18:00-2:00    |
	| Cabin Fever  | Toronto | Food     | Wednesday|18:00-2:00  |
	| Halo Brewery | Toronto | Food     | Friday|15:00-21:00    |
	| Halo Brewery | Toronto | Food     | Saturday|11:00-21:00  |
	| Halo Brewery | Toronto | Food     | Sunday|11:00-21:00    |
	| Halo Brewery | Toronto | Food     | Thursday|15:00-21:00  |
	| Halo Brewery | Toronto | Food     | Tuesday|15:00-21:00   |
	| Halo Brewery | Toronto | Food     | Wednesday|15:00-21:00 |
	+--------------+---------+----------+-----------------------+
*/

/*
ii: Follow the same logic
*/

	SELECT
	  B.name
	  ,B.city
	  ,C.category
	  ,B.review_count
	FROM 
	  business B
	  INNER JOIN
		category C
		  ON
		B.id = C.business_id
	WHERE 
	  (C.category = 'Food'
		AND 
	  B.city = 'Toronto')
		AND
	  (B.name = 'Loblaws')
	GROUP BY B.name
	ORDER BY B.name
	
/*
Ouput:
	+---------+---------+----------+--------------+
	| name    | city    | category | review_count |
	+---------+---------+----------+--------------+
	| Loblaws | Toronto | Food     |           10 |
	+---------+---------+----------+--------------+
*/

	SELECT
	  B.name
	  ,B.city
	  ,C.category
	  ,B.review_count
	FROM 
	  business B
	  INNER JOIN
		category C
		  ON
		B.id = C.business_id
	WHERE 
	  (C.category = 'Food'
		AND 
	  B.city = 'Toronto')
		AND
	  (B.name = 'Halo Brewery'
		OR
	  B.name = 'Cabin Fever')
	GROUP BY B.name
	ORDER BY B.name
	
/*
Output:
	+--------------+---------+----------+--------------+
	| name         | city    | category | review_count |
	+--------------+---------+----------+--------------+
	| Cabin Fever  | Toronto | Food     |           26 |
	| Halo Brewery | Toronto | Food     |           15 |
	+--------------+---------+----------+--------------+
*/

/*
iii: Take all geospatial data to infer something
*/
	SELECT
	  B.name
	  ,B.neighborhood
	  ,B.address
	  ,B.city
	  ,B.latitude
	  ,B.longitude
	  ,C.category
	  ,B.stars
	FROM 
	  business B
	  INNER JOIN
		category C
		  ON
		B.id = C.business_id
	WHERE 
	  (C.category = 'Food'
		AND 
	  B.city = 'Toronto')
	GROUP BY B.name
	ORDER BY B.
	
/*
Output:
	+--------------------+-----------------+----------------------+---------+----------+-----------+----------+-------+
	| name               | neighborhood    | address              | city    | latitude | longitude | category | stars |
	+--------------------+-----------------+----------------------+---------+----------+-----------+----------+-------+
	| Cabin Fever        | High Park       | 1669 Bloor Street W  | Toronto |  43.6553 |  -79.4567 | Food     |   4.5 |
	| Halo Brewery       | Wallace Emerson | 247 Wallace Avenue   | Toronto |  43.6618 |  -79.4466 | Food     |   4.0 |
	| Loblaws            | Roncesvalles    | 2280 Dundas Street W | Toronto |  43.6551 |  -79.4494 | Food     |   2.5 |
	| The Kosher Gourmet |                 | 3003 Bathurst Street | Toronto |  43.7175 |  -79.4291 | Food     |   3.5 |
	+--------------------+-----------------+----------------------+---------+----------+-----------+----------+-------+
*/


2. Group business based on the ones that are open and the ones that are closed. What
differences can you find between the ones that are still open and the ones that are
closed? List at least two differences and the SQL code you used to arrive at your answer.

Since all food companies in Toronto are open. However, even if we find a similarities
between these companies, we can not asure that behaviour is just for open companies, for
example, the query example below.
         
         
SQL code used for analysis:

	SELECT
	  B.name
	  ,B.is_open
	FROM 
	  business B
	  INNER JOIN
		category C
		  ON
		B.id = C.business_id
	WHERE 
	  (C.category = 'Food'
		AND 
	  B.city = 'Toronto')
	  
Output:
	+--------------------+---------+
	| name               | is_open |
	+--------------------+---------+
	| Cabin Fever        |       1 |
	| Loblaws            |       1 |
	| Halo Brewery       |       1 |
	| The Kosher Gourmet |       1 |
	+--------------------+---------+
	
-- Query example:
	SELECT
	  B.name
	  ,B.is_open
	  ,CH.date
	  ,CH.count
	FROM 
	  business B
	  INNER JOIN
		category C
		  ON
		B.id = C.business_id
	  JOIN
		checkin CH
		  ON
		B.id = CH.business_id
	WHERE 
	  (C.category = 'Food'
		AND 
	  B.city = 'Toronto')	
Output:
	+------+---------+------+-------+
	| name | is_open | date | count |
	+------+---------+------+-------+
	+------+---------+------+-------+
	(Zero rows)

	
	
3. For this last part of your analysis, you are going to choose the type of analysis
you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment
analysis, clustering businesses to find commonalities or anomalies between them, pre-
dicting the overall star rating for a business, predicting the number of fans a user will
have, and so on. These are just a few examples to get you started, so feel free to be
creative and come up with your own problem you want to solve. Provide answers, in-line,
to all of the following:
	
i. Indicate the type of analysis you chose to do: Inferential Statistics. I desire to prepare
	a workfile or dataset to model a multiple linear regression for the number of fans in
	user table.
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why
you chose that data:
	
	To predict the number of fans, I decided to use only three independant variables to avoid
	overfitting, these columns are 'average_stars', 'review_count' and the average of other
	three columns (useful, cool and funny) named 'Avg_Reactions'. 
	
	I construc 'Avg_Reactions' to consider the general information of its three columns instead
	of consider each column alone and have five independant variables. However, the accuracity 
	of this approximation depends on the model we choose to fit the data. For example, if we choose
	a multilinear model, the third record would be an outlier, at first glance.
                           
                  
iii. Output of your finished dataset:
         
	+------+---------------+--------------+---------------+
	| fans | average_stars | review_count | Avg_Reactions |
	+------+---------------+--------------+---------------+
	|  503 |          3.21 |          609 |        8531.0 |
	|  497 |          4.05 |          968 |         554.0 |
	|  311 |           4.4 |         1153 |      368230.0 |
	|  253 |           3.6 |         2000 |       34856.0 |
	|  173 |          3.69 |          930 |       15801.0 |
	|  159 |          4.09 |          813 |          67.0 |
	|  133 |          3.99 |          377 |        2810.0 |
	|  126 |          4.41 |         1215 |       28094.0 |
	|  124 |           4.1 |          862 |       26801.0 |
	|  120 |          3.68 |          834 |         947.0 |
	|  115 |          3.36 |          861 |        7343.0 |
	|  111 |          4.09 |          408 |        3629.0 |
	|  105 |          3.95 |          255 |         341.0 |
	|  104 |          3.71 |         1039 |        4819.0 |
	|  101 |          3.89 |          694 |         427.0 |
	|  101 |          3.14 |         1246 |       18805.0 |
	|   96 |           3.7 |          307 |        3478.0 |
	|   89 |          4.06 |          584 |        8932.0 |
	|   85 |           4.1 |          842 |         294.0 |
	|   84 |           4.1 |          220 |        6319.0 |
	|   81 |          3.67 |          408 |        2319.0 |
	|   80 |          3.64 |          178 |        2805.0 |
	|   78 |          3.62 |          754 |          29.0 |
	|   76 |          4.11 |         1339 |        1947.0 |
	|   73 |          3.87 |          161 |          29.0 |
	+------+---------------+--------------+---------------+
	(Output limit exceeded, 25 of 100 total rows shown)
		 
         
iv. Provide the SQL code you used to create your final dataset:

	SELECT
	  fans
	  ,average_stars
	  ,review_count
	  ,AVG(useful + funny + cool) AS Avg_Reactions
	FROM 
	  user
	WHERE fans >= 30
	GROUP BY id
	ORDER BY fans DESC